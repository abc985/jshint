"use strict";
var path = {};
/**
 * Returns the same text but with a deprecation notice.
 * Useful for options descriptions.
 *
 * @param {string} text
 * @param {string} alt (optional) Alternative command to include in the
 *                 deprecation notice.
 *
 * @returns {string}
 */
function deprecated(text, alt) {
  if (!alt) {
    return text + " (DEPRECATED)";
  }

  return text + " (DEPRECATED, use " + alt + " instead)";
}

exports.config = {
  short: "c",
  desc: "Custom configuration file",
  type: "string",
  dflt: false
};

exports.reporter = {
  short: null,
  desc: "Custom reporter",
  type: "string",
  //vals: [path, "jslint", "checkstyle", "unix"],
  apply: function(value) {
    var reporterModule;
    try {
      reporterModule = require(value);
    } catch (err) {
      return new Error("Can't load reporter file: " + value);
    }

    return reporterModule.reporter || new Error("Reporter module " + value +
          " does not define the required `reporter` property");
  }
};

exports.prereq = {
  short: null,
  desc: "Comma-separate list of prerequisite (paths). E.g. files which " +
    "include definitions of global variabls used throughout your project",
  type: "string",
  dflt: null
};

exports.exclude = {
  short: null,
  desc: "Exclude files matching the given filename pattern (same as " +
    ".jshintignore)",
  type: "string",
  dflt: null
};

exports["exclude-path"] = {
  short: null,
  desc: "Pass in a custom jshintignore file path",
  type: "string",
  dflt: null
};

exports.filename = {
  short: null,
  desc: "Pass in a filename when using STDIN to emulate config lookup for " +
    "that file name",
  type: "string",
  dflt: null
};

exports.verbose = {
  short: null,
  desc: "Show message codes",
  dflt: false
};

exports["show-non-errors"] = {
  short: null,
  desc: "Show additional data generated by jshint",
  dflt: false
};

exports["extra-ext"] = {
  short: null,
  desc: "Comma-separated list of file extensions to use (default is .js)",
  type: "string",
  dflt: ""
};

exports.extract = {
  short: null,
  desc: "Extract inline scripts contained in HTML (auto|always|never, " +
    "default to never)",
  type: "string",
  dflt: "never"
};

exports["jslint-reporter"] = {
  short: null,
  desc: deprecated("Use a jslint compatible reporter", "--reporter=jslint")
};

exports["checkstyle-reporter"] = {
  short: null,
  desc: deprecated("Use a CheckStyle compatible XML reporter",
    "--reporter=checkstyle")
};
